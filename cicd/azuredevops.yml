name: $(version)

variables:
  sonarProjectKey: 'tiagor87_Seedwork.CQRS.Bus'
  major: 0
  minor: 3
  patch: $[counter(format('{0}.{1}-{2}', variables['major'], variables['minor'], variables['Build.SourceBranch']), 0)]
  ${{if eq(variables['Build.Reason'], 'PullRequest')}}:
    sufix: $[format('-pr{0}', variables['System.PullRequest.PullRequestNumber'])]
  ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))}}:
    sufix: ''
  version: $[format('{0}.{1}.{2}{3}', variables['major'], variables['minor'], variables['patch'], variables['sufix'])]

trigger:
  batch: true
  branches:
    include:
      - 'master'
pr:
  autoCancel: false
  branches:
    include:
      - 'master'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build job
        pool:
          vmImage: ubuntu-latest
          demands:
            - java
        steps:
          - task: Bash@3
            displayName: 'Run RabbitMQ container'
            inputs:
              targetType: 'inline'
              script: 'docker run -p 5672:5672 -d rabbitmq:alpine'

          - task: SonarCloudPrepare@1
            displayName: 'Prepare analysis on SonarCloud'
            inputs:
              SonarCloud: SonarCloud
              organization: 'tiagor87-github'
              projectKey: '$(sonarProjectKey)'
              projectName: '$(Build.DefinitionName)'
              projectVersion: '$(version)'
              extraProperties: |
                sonar.exclusions=**/lib/**,**/obj/**,**/*.dll,**/tests/**
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/tests/**/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

          - task: DotNetCoreCLI@2
            displayName: 'Restore'
            inputs:
              command: restore
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              projects: '**/*.csproj'
              arguments: '--no-restore --configuration Release /p:Version=$(version)'

          - task: DotNetCoreCLI@2
            displayName: 'Test - opencover'
            inputs:
              command: test
              projects: 'tests/**/*.csproj'
              arguments: '--no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'

          
#          - task: reportgenerator@4
#            displayName: ReportGenerator
#            inputs:
#              reports: 'tests/Core/coverage.opencover.xml'
#              targetdir: 'tests/coverage'
#              reporttypes: 'Cobertura;SonarQube'
#              sourcedirs: 'src'
#              tag: '$(version)'

          - task: SonarCloudAnalyze@1
            displayName: 'Run Code Analysis'

          - task: DotNetCoreCLI@2
            displayName: 'Pack Release'
            inputs:
              command: pack
              packagesToPack: 'src/**/*.csproj'
              arguments: '--no-build --configuration Release /p:Version=$(version)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Package Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              contents: '**/*.nupkg'
              artifactName: 'drop'

#          - task: PublishCodeCoverageResults@1
#            displayName: 'Publish Coverage Results'
#            inputs:
#              codeCoverageTool: 'cobertura'
#              summaryFileLocation: $(Build.SourcesDirectory)/tests/coverage/Cobertura.xml
#              reportDirectory: $(Build.SourcesDirectory)/tests/coverage

          - task: SonarCloudPublish@1
            displayName: 'Publish Quality Gate Result'

  - stage: Deploy
    displayName: Deploy stage
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: Deploy
        displayName: Deploy job
        pool:
          vmImage: vs2017-win2016
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Package Artifact'
            inputs:
              artifactName: 'drop'
              itemPattern: '**/*.nupkg'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: NuGetCommand@2
            displayName: 'Publish on Nuget'
            inputs:
              command: push
              packagesToPush: '$(System.ArtifactsDirectory)/drop/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: Nuget

