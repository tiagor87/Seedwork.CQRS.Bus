name: $(version)

variables:
  sonar.projectKey: 'tiagor87_Seedwork.CQRS.Bus'
  version.major: 0
  version.minor: 3
  version.patch: $[counter(format('{0}.{1}-{2}', variables['version.major'], variables['version.minor'], variables['Build.SourceBranch']), 0)]
  ${{if eq(variables['Build.Reason'], 'PullRequest')}}:
    version: $[format('PR{0}.{1}', variables['System.PullRequest.PullRequestNumber'], variables['version.patch'])]
  ${{if and(ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))}}:
    version: $[format('{0}.{1}.{2}', variables['version.major'], variables['version.minor'], variables['version.patch'])]

trigger:
  batch: true
  branches:
    include:
      - 'master'
pr:
  autoCancel: false
  branches:
    include:
      - 'master'

stages:
  - stage: Analysing
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job:
        pool:
          vmImage: ubuntu-latest
          demands:
            - java
        steps:
          - task: Bash@3
            displayName: 'Run RabbitMQ container'
            inputs:
              targetType: 'inline'
              script: 'docker run -p 5672:5672 -d rabbitmq:alpine'

          - task: SonarCloudPrepare@1
            displayName: 'Prepare analysis on SonarCloud'
            inputs:
              SonarCloud: SonarCloud
              organization: 'tiagor87-github'
              projectKey: '$(sonar.projectKey)'
              projectName: '$(Build.DefinitionName)'
              projectVersion: '$(version.major).$(version.minor).$(version.patch)'
              extraProperties: |
                sonar.exclusions=**/lib/**,**/obj/**,**/*.dll,**/tests/**
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/tests/**/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx

          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              projects: '**/*.csproj'
              arguments: '--configuration Release -p:Version=$(version.major).$(version.minor).$(version.patch)'
              verbosityRestore: minimal

          - task: DotNetCoreCLI@2
            displayName: 'Test'
            inputs:
              command: test
              projects: 'tests/**/*.csproj'
              arguments: '--no-build --configuration Release -p:CollectCoverage=true -p:CoverletOutputFormat=opencover'

          - task: SonarCloudAnalyze@1
            displayName: 'Run Code Analysis'
            
          - task: SonarCloudPublish@1
            displayName: 'Publish Quality Gate Result'
              
          - task: reportgenerator@4
            displayName: ReportGenerator
            inputs:
              reports: 'tests/Core/coverage.opencover.xml'
              targetdir: 'tests'
              reporttypes: 'Cobertura;'
              sourcedirs: 'src'
              
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Coverage Results'
            inputs:
              codeCoverageTool: 'cobertura'
              summaryFileLocation: $(Build.SourcesDirectory)/tests/Cobertura.xml
              
  - stage: Deploying
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: Packing
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DotNetCoreCLI@2            
            inputs:
              command: pack
              packagesToPack: 'src/**/*.csproj'
              configurationToPack: 'Release'
              versioningScheme: byPrereleaseNumber
              majorVersion: $(version.major)
              minorVersion: $(version.minor)
              patchVersion: $(version.patch)
              verbosityRestore: minimal
              verbosityPack: minimal
  
          - task: PublishBuildArtifacts@1
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              contents: '**/*.nupkg'
              artifactName: 'drop'
              
      - job: Publishing
        dependsOn: Packing
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Package Artifact'
            inputs:
              artifactName: 'drop'
              itemPattern: '**/*.nupkg'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: NuGetCommand@2
            displayName: 'Publish on Nuget'
            inputs:
              command: push
              packagesToPush: '$(System.ArtifactsDirectory)/drop/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: Nuget